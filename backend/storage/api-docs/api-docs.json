{
    "openapi": "3.0.0",
    "info": {
        "title": "Tummy Time API",
        "description": "API documentation for the Tummy Time project",
        "contact": {
            "email": "support@example.com"
        },
        "version": "1.0.0"
    },
    "servers": [
        {
            "url": "http://localhost:8000"
        }
    ],
    "paths": {
        "/api/login": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Log in a user",
                "description": "Authenticates a user with email and password, and returns an access token.",
                "operationId": "loginUser",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "email",
                                    "password"
                                ],
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "sabiq@example.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "Laravel@123"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful login",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "token": {
                                            "description": "Authentication token",
                                            "type": "string"
                                        },
                                        "token_type": {
                                            "type": "string",
                                            "example": "Bearer"
                                        },
                                        "expires_at": {
                                            "type": "string",
                                            "format": "date-time",
                                            "example": "2024-12-31 23:59:59"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error or incorrect credentials",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "string",
                                            "example": "Credentials are incorrect."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/logout": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Log out a user",
                "description": "Invalidates the current user's access token, effectively logging them out.",
                "operationId": "logoutUser",
                "responses": {
                    "200": {
                        "description": "Successfully logged out",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "string",
                                            "example": "Successfully logged out."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/categories": {
            "get": {
                "tags": [
                    "Category"
                ],
                "summary": "Get a paginated list of all categories",
                "description": "Retrieves a paginated list of all categories. Accessible by any authenticated user.",
                "operationId": "getCategoriesList",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number for pagination",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 10
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CategoryPagination"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Category"
                ],
                "summary": "Create a new category",
                "description": "Creates a new category. Requires super admin privileges.",
                "operationId": "createCategory",
                "requestBody": {
                    "description": "Category creation data.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Desserts"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Category created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "string",
                                            "example": "Category created successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden: You are not authorized to create a category.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error: Invalid input for allowed fields.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string",
                                                    "example": "The name has already been taken."
                                                }
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/categories/{id}": {
            "get": {
                "tags": [
                    "Category"
                ],
                "summary": "Get category details by ID",
                "description": "Retrieves the details of a specific category by its ID. Accessible by any authenticated user.",
                "operationId": "getCategoryById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the category to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Category"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found: Category not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Category"
                ],
                "summary": "Delete a category",
                "description": "Deletes a category by its ID. Requires super admin privileges.",
                "operationId": "deleteCategory",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the category to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content: Category deleted successfully."
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden: You are not authorized to delete this category.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found: Category not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/feedbacks/{food_id}": {
            "get": {
                "tags": [
                    "Feedback"
                ],
                "summary": "Get feedback for a specific food item",
                "description": "Retrieves all feedback entries for a given food ID.",
                "operationId": "getFeedbackByFoodId",
                "parameters": [
                    {
                        "name": "food_id",
                        "in": "path",
                        "description": "ID of the food item to get feedback for",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of feedback entries",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Feedback"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Food not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/feedbacks": {
            "post": {
                "tags": [
                    "Feedback"
                ],
                "summary": "Create a new feedback entry",
                "description": "Creates a new feedback entry for a food item.",
                "operationId": "createFeedback",
                "requestBody": {
                    "description": "Feedback details",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RegisterFeedbackRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Feedback created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Feedback"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/feedbacks/{feedback}": {
            "delete": {
                "tags": [
                    "Feedback"
                ],
                "summary": "Delete an existing feedback entry",
                "description": "Deletes an existing feedback entry by its ID. Only the owner or a SuperAdmin can delete the feedback.",
                "operationId": "deleteFeedback",
                "parameters": [
                    {
                        "name": "feedback",
                        "in": "path",
                        "description": "ID of the feedback to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Feedback deleted successfully"
                    },
                    "403": {
                        "description": "Unauthorized action",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Feedback not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Feedback"
                ],
                "summary": "Update an existing feedback entry",
                "description": "Updates an existing feedback entry by its ID. Only the owner can update their feedback.",
                "operationId": "updateFeedback",
                "parameters": [
                    {
                        "name": "feedback",
                        "in": "path",
                        "description": "ID of the feedback to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Updated feedback comment",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateFeedbackRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Feedback updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Feedback"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Unauthorized action",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Feedback not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/foods": {
            "get": {
                "tags": [
                    "Food"
                ],
                "summary": "Get a paginated list of all food items",
                "description": "Retrieves a paginated list of all food items with optional filtering by category and searching by name. Accessible by any authenticated user.",
                "operationId": "getFoodsList",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number for pagination",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 10
                        }
                    },
                    {
                        "name": "category",
                        "in": "query",
                        "description": "Filter food by category name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Search food by name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FoodPagination"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Food"
                ],
                "summary": "Create a new food item",
                "description": "Creates a new food item. Requires super admin privileges.",
                "operationId": "createFood",
                "requestBody": {
                    "description": "Food item creation data.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "category_id",
                                    "name",
                                    "price",
                                    "stock",
                                    "is_available"
                                ],
                                "properties": {
                                    "category_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "name": {
                                        "type": "string",
                                        "example": "Chicken Biryani"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "A classic Indian rice dish with spicy chicken.",
                                        "nullable": true
                                    },
                                    "price": {
                                        "type": "number",
                                        "format": "float",
                                        "example": 15.99
                                    },
                                    "stock": {
                                        "type": "integer",
                                        "example": 100
                                    },
                                    "is_available": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "image_url": {
                                        "description": "URL of the food item's image.",
                                        "type": "string",
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "category_id",
                                    "name",
                                    "price",
                                    "stock",
                                    "is_available"
                                ],
                                "properties": {
                                    "category_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "name": {
                                        "type": "string",
                                        "example": "Chicken Biryani"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "A classic Indian rice dish with spicy chicken.",
                                        "nullable": true
                                    },
                                    "price": {
                                        "type": "number",
                                        "format": "float",
                                        "example": 15.99
                                    },
                                    "stock": {
                                        "type": "integer",
                                        "example": 100
                                    },
                                    "is_available": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "image_url": {
                                        "description": "Image file for the food item.",
                                        "type": "string",
                                        "format": "binary",
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Food created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "string",
                                            "example": "Food created successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden: You are not authorized to create a food item.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error: Invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/foods/most-sold": {
            "get": {
                "tags": [
                    "Food"
                ],
                "summary": "Get a paginated list of food items sorted by most sold (SuperAdmin only)",
                "operationId": "9771efb5c416016656d9a46cb838924d",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number for pagination",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FoodWithCountPagination"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/foods/{id}": {
            "get": {
                "tags": [
                    "Food"
                ],
                "summary": "Get food details by ID",
                "description": "Retrieves the details of a specific food item by its ID. Accessible by any authenticated user.",
                "operationId": "getFoodById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the food item to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Food"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found: Food not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Food"
                ],
                "summary": "Delete a food item",
                "description": "Deletes a food item by its ID. Requires super admin privileges.",
                "operationId": "deleteFood",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the food item to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Food deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "string",
                                            "example": "Food deleted successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden: You are not authorized to delete a food item.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found: Food not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Food"
                ],
                "summary": "Update an existing food item",
                "description": "Updates the details of an existing food item. Requires super admin privileges. Note: A POST request is used here with 'multipart/form-data' to handle both fields and file uploads.",
                "operationId": "updateFood",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the food item to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Food item data to update.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "category_id": {
                                        "type": "integer",
                                        "example": 2,
                                        "nullable": true
                                    },
                                    "name": {
                                        "type": "string",
                                        "example": "Spicy Chicken Biryani",
                                        "nullable": true
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Updated description.",
                                        "nullable": true
                                    },
                                    "price": {
                                        "type": "number",
                                        "format": "float",
                                        "example": 16.5,
                                        "nullable": true
                                    },
                                    "stock": {
                                        "type": "integer",
                                        "example": 75,
                                        "nullable": true
                                    },
                                    "is_available": {
                                        "type": "boolean",
                                        "example": false,
                                        "nullable": true
                                    },
                                    "image_url": {
                                        "description": "URL of the new image, or 'null' to remove.",
                                        "type": "string",
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "category_id": {
                                        "type": "integer",
                                        "example": 2,
                                        "nullable": true
                                    },
                                    "name": {
                                        "type": "string",
                                        "example": "Spicy Chicken Biryani",
                                        "nullable": true
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Updated description.",
                                        "nullable": true
                                    },
                                    "price": {
                                        "type": "number",
                                        "format": "float",
                                        "example": 16.5,
                                        "nullable": true
                                    },
                                    "stock": {
                                        "type": "integer",
                                        "example": 75,
                                        "nullable": true
                                    },
                                    "is_available": {
                                        "type": "boolean",
                                        "example": false,
                                        "nullable": true
                                    },
                                    "image_url": {
                                        "description": "New image file for the food item. Send 'null' to delete the existing image.",
                                        "type": "string",
                                        "format": "binary",
                                        "nullable": true
                                    },
                                    "_method": {
                                        "description": "Method spoofing for form data.",
                                        "type": "string",
                                        "default": "PATCH"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Food updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "string",
                                            "example": "Food updated successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden: You are not authorized to update a food item.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found: Food not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error: Invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/orders": {
            "get": {
                "tags": [
                    "Orders"
                ],
                "summary": "Get a list of all orders for the current user or all orders for staff/admin",
                "operationId": "22d21713fd1e12635d9297e93c85a1ba",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrderPagination"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Orders"
                ],
                "summary": "Create a new order from the user's cart",
                "operationId": "287b2135ca42e747b87b227ba9843d32",
                "responses": {
                    "201": {
                        "description": "Order created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Order created successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Cart not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/orders/new": {
            "get": {
                "tags": [
                    "Orders"
                ],
                "summary": "Get a list of new orders (Staff/Admin only)",
                "operationId": "d3efd84dd0031d0f253b1ed7a545651d",
                "parameters": [
                    {
                        "name": "order_status",
                        "in": "query",
                        "description": "Filter new orders by status (e.g., pending)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "order_id",
                        "in": "query",
                        "description": "Search for a specific order by ID",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NewOrderPagination"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/orders/{order}": {
            "get": {
                "tags": [
                    "Orders"
                ],
                "summary": "Get details for a specific order",
                "operationId": "56013558ff3ad5d7cf47f83c80e80e9e",
                "parameters": [
                    {
                        "name": "order",
                        "in": "path",
                        "description": "ID of the order to retrieve",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrderWithItems"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Order not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Orders"
                ],
                "summary": "Delete a specific order (owner only)",
                "operationId": "cbb9a5cd8bba6212a822bf4294fb1801",
                "parameters": [
                    {
                        "name": "order",
                        "in": "path",
                        "description": "ID of the order to delete",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SuccessResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Order not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Orders"
                ],
                "summary": "Update the status of a specific order",
                "operationId": "db8ace98eb9f8b14fba75cbe764c72f3",
                "parameters": [
                    {
                        "name": "order",
                        "in": "path",
                        "description": "ID of the order to update",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "order_status"
                                ],
                                "properties": {
                                    "order_status": {
                                        "type": "string",
                                        "enum": [
                                            "preparing",
                                            "ready",
                                            "picked",
                                            "delivered",
                                            "cancelled"
                                        ],
                                        "example": "ready"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Order updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SuccessResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Order not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/payments": {
            "get": {
                "tags": [
                    "Payments"
                ],
                "summary": "Get a list of payments, optionally filtered by order",
                "description": "Retrieves a paginated list of all payments. SuperAdmins can see all payments, while other users can only see their own. An optional order_id query parameter can be used to filter payments.",
                "operationId": "getPaymentsList",
                "parameters": [
                    {
                        "name": "order_id",
                        "in": "query",
                        "description": "Filter payments by a specific order ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentPagination"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Payments"
                ],
                "summary": "Create a new payment",
                "description": "Creates a new payment for a specified order. The authenticated user must own the order.",
                "operationId": "createPayment",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RegisterPaymentRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Payment created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "string",
                                            "example": "Payment successful."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden: Not authorized to create a payment for this order.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Order not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/payments/{payment}": {
            "get": {
                "tags": [
                    "Payments"
                ],
                "summary": "Get a single payment by ID",
                "description": "Retrieves a specific payment record by its ID. Users can only access their own payments unless they are a SuperAdmin.",
                "operationId": "getPaymentById",
                "parameters": [
                    {
                        "name": "payment",
                        "in": "path",
                        "description": "ID of the payment to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Payment"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden: You are not authorized to view this payment.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Payment not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Payments"
                ],
                "summary": "Delete a payment",
                "description": "Deletes a specific payment by its ID. Only SuperAdmins are authorized to perform this action.",
                "operationId": "deletePayment",
                "parameters": [
                    {
                        "name": "payment",
                        "in": "path",
                        "description": "ID of the payment to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Payment deleted successfully. No content returned."
                    },
                    "403": {
                        "description": "Forbidden: Not authorized to delete this payment.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Payment not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/cart-items/{user_id}": {
            "get": {
                "tags": [
                    "Cart"
                ],
                "summary": "Get all cart items for a specific user",
                "description": "Retrieves all cart items for a user by their ID. Requires the authenticated user to be the owner of the cart.",
                "operationId": "getCartItemsByUserId",
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "ID of the user whose cart items to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CartItemList"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden: You are not authorized to access this cart.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found: Cart not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/cart-items/{cart_id}": {
            "put": {
                "tags": [
                    "Cart"
                ],
                "summary": "Update a user's cart items",
                "description": "Replaces all existing cart items with a new list. This acts as a full cart replacement. Requires the authenticated user to be the cart owner.",
                "operationId": "updateCartItems",
                "parameters": [
                    {
                        "name": "cart_id",
                        "in": "path",
                        "description": "ID of the cart to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateCartItemRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Cart updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "string",
                                            "example": "Cart updated successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden: You are not authorized to update this cart.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error: Invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Cart"
                ],
                "summary": "Delete all items from a user's cart",
                "description": "Removes all cart items from a specific cart by its ID. Requires the authenticated user to be the cart owner.",
                "operationId": "deleteCartItems",
                "parameters": [
                    {
                        "name": "cart_id",
                        "in": "path",
                        "description": "ID of the cart to clear",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Cart items deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "string",
                                            "example": "Successfully deleted 3 cart item(s)."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden: You are not authorized to delete this cart.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found: Cart not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/users": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get a paginated list of all users",
                "description": "Retrieves a paginated list of all registered users. Requires admin privileges.",
                "operationId": "getUsersList",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number for pagination",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 10
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserPagination"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden: You are not authorized to view all users.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Create a new user",
                "description": "Registers a new user. Sensitive fields like 'is_staff' and 'is_active'\n     * cannot be set by the client for this endpoint.",
                "operationId": "createUser",
                "requestBody": {
                    "description": "User registration data. Can be JSON or Multipart Form Data.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "email",
                                    "username",
                                    "password",
                                    "password_confirmation"
                                ],
                                "properties": {
                                    "first_name": {
                                        "type": "string",
                                        "example": "Jane",
                                        "nullable": true
                                    },
                                    "last_name": {
                                        "type": "string",
                                        "example": "Doe",
                                        "nullable": true
                                    },
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "jane.doe@example.com"
                                    },
                                    "username": {
                                        "type": "string",
                                        "example": "janedoe"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "Password123!"
                                    },
                                    "password_confirmation": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "Password123!"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "User created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "string",
                                            "example": "Operation completed successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden: Unauthorized key (e.g., is_staff, is_active, role) provided by client.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error: Invalid input for allowed fields.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string",
                                                    "example": "The field is required."
                                                }
                                            }
                                        }
                                    },
                                    "type": "object"
                                },
                                "example": {
                                    "message": "The given data was invalid.",
                                    "errors": {
                                        "email": [
                                            "The email is already in use."
                                        ],
                                        "password": [
                                            "The password confirmation does not match."
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/users/{user}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get user details by ID or slug",
                "description": "Retrieves the details of a specific user by their ID or slug. A user can view their own profile, or an admin can view any user's profile. Includes portfolio links if the user is a 'provider'.",
                "operationId": "getUserByIdOrSlug",
                "parameters": [
                    {
                        "name": "user",
                        "in": "path",
                        "description": "ID or slug of the user to retrieve",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/User"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden: You are not authorized to view this user.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found: User not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Users"
                ],
                "summary": "Delete a user",
                "description": "Deletes a user by their ID or slug. A user can delete their own account, or an admin can delete any user's account.",
                "operationId": "deleteUser",
                "parameters": [
                    {
                        "name": "user",
                        "in": "path",
                        "description": "ID or slug of the user to delete",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content: User deleted successfully."
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden: You are not authorized to delete this user.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found: User not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Users"
                ],
                "summary": "Update an existing user",
                "description": "Updates the details of an existing user. A user can update their own profile, or a super admin can update any user's profile.\n     * Sensitive fields like 'is_staff', 'is_active', and 'role' are ignored/discarded if sent in the request body, and 'password' is handled separately for updates.",
                "operationId": "updateUser",
                "parameters": [
                    {
                        "name": "user",
                        "in": "path",
                        "description": "ID or slug of the user to update",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "User data to update. Can be JSON or Multipart Form Data.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "first_name": {
                                        "type": "string",
                                        "example": "Updated Name",
                                        "nullable": true
                                    },
                                    "last_name": {
                                        "type": "string",
                                        "example": "Updated Lastname",
                                        "nullable": true
                                    },
                                    "username": {
                                        "type": "string",
                                        "example": "updateduser",
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "string",
                                            "example": "User updated successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden: You are not authorized to update this user.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found: User not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error: Invalid input for allowed fields.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string",
                                                    "example": "The field is required."
                                                }
                                            }
                                        }
                                    },
                                    "type": "object"
                                },
                                "example": {
                                    "message": "The given data was invalid.",
                                    "errors": {
                                        "email": [
                                            "The email is already in use."
                                        ],
                                        "username": [
                                            "The username is already taken by another user."
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/users/staff": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Create a new staff user",
                "description": "Registers a new user and sets 'is_staff' to true. Requires super admin privileges for the authenticated user. \n     * Sensitive fields like 'is_active' and 'role' ('staff') cannot be set by the client for this endpoint.",
                "operationId": "createStaffUser",
                "requestBody": {
                    "description": "Admin user registration data. Can be JSON or Multipart Form Data.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "email",
                                    "username",
                                    "password",
                                    "password_confirmation",
                                    "is_staff",
                                    "role"
                                ],
                                "properties": {
                                    "first_name": {
                                        "type": "string",
                                        "example": "Admin",
                                        "nullable": true
                                    },
                                    "last_name": {
                                        "type": "string",
                                        "example": "User",
                                        "nullable": true
                                    },
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "admin@example.com"
                                    },
                                    "username": {
                                        "type": "string",
                                        "example": "adminuser"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "AdminPass123!"
                                    },
                                    "password_confirmation": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "AdminPass123!"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "User created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "string",
                                            "example": "Operation completed successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden: Unauthorized key (e.g., is_active, incorrect role) provided, or authenticated user lacks privileges to create an an admin.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error: Invalid input for allowed fields.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string",
                                                    "example": "The field is required."
                                                }
                                            }
                                        }
                                    },
                                    "type": "object"
                                },
                                "example": {
                                    "message": "The given data was invalid.",
                                    "errors": {
                                        "email": [
                                            "The email is already in use."
                                        ],
                                        "password": [
                                            "The password confirmation does not match."
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "ErrorResponse": {
                "title": "Error Response",
                "description": "Standard error response format for generic errors (e.g., 401, 403, 404, 500)",
                "properties": {
                    "errors": {
                        "description": "Error message",
                        "type": "string"
                    }
                },
                "type": "object",
                "example": {
                    "errors": "Something went wrong."
                }
            },
            "SuccessResponse": {
                "title": "Success Response",
                "description": "Standard success response format for updates and deletes",
                "properties": {
                    "success": {
                        "description": "Success message",
                        "type": "string"
                    }
                },
                "type": "object",
                "example": {
                    "success": "Operation successful."
                }
            },
            "User": {
                "title": "User",
                "description": "User model",
                "properties": {
                    "id": {
                        "description": "User ID",
                        "type": "integer",
                        "format": "int64"
                    },
                    "first_name": {
                        "description": "User's first name",
                        "type": "string"
                    },
                    "last_name": {
                        "description": "User's last name",
                        "type": "string"
                    },
                    "email": {
                        "description": "User's email address",
                        "type": "string",
                        "format": "email"
                    },
                    "username": {
                        "description": "User's unique username",
                        "type": "string"
                    },
                    "is_staff": {
                        "description": "Indicates if the user has admin privileges",
                        "type": "boolean"
                    },
                    "is_active": {
                        "description": "Indicates if the user account is active",
                        "type": "boolean"
                    },
                    "created_at": {
                        "description": "Timestamp of user creation",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Timestamp of last update",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object",
                "example": {
                    "id": 1,
                    "first_name": "John",
                    "last_name": "Doe",
                    "email": "john.doe@example.com",
                    "username": "johndoe",
                    "is_staff": false,
                    "is_active": true,
                    "created_at": "2023-01-01T12:00:00.000000Z",
                    "updated_at": "2023-01-01T12:00:00.000000Z"
                }
            },
            "UserPagination": {
                "title": "User Pagination",
                "description": "Paginated list of users",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/User"
                        }
                    },
                    "links": {
                        "description": "Pagination links",
                        "type": "object"
                    },
                    "meta": {
                        "description": "Pagination meta information",
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "Category": {
                "title": "Category",
                "description": "Category model",
                "properties": {
                    "id": {
                        "description": "Category ID",
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "description": "Category name",
                        "type": "string"
                    },
                    "created_at": {
                        "description": "Timestamp of category creation",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Timestamp of last update",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object",
                "example": {
                    "id": 1,
                    "name": "Beverages",
                    "created_at": "2023-01-01T12:00:00.000000Z",
                    "updated_at": "2023-01-01T12:00:00.000000Z"
                }
            },
            "CategoryPagination": {
                "title": "Category Pagination",
                "description": "Paginated list of categories",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Category"
                        }
                    },
                    "links": {
                        "description": "Pagination links",
                        "type": "object"
                    },
                    "meta": {
                        "description": "Pagination meta information",
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "Food": {
                "title": "Food",
                "description": "Food item model",
                "properties": {
                    "id": {
                        "description": "Food ID",
                        "type": "integer",
                        "format": "int64"
                    },
                    "category_id": {
                        "description": "ID of the associated category",
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "description": "Name of the food item",
                        "type": "string"
                    },
                    "description": {
                        "description": "Description of the food item",
                        "type": "string",
                        "nullable": true
                    },
                    "price": {
                        "description": "Price of the food item",
                        "type": "number",
                        "format": "float"
                    },
                    "is_available": {
                        "description": "Availability status of the food item",
                        "type": "boolean"
                    },
                    "stock": {
                        "description": "Current stock quantity",
                        "type": "integer"
                    },
                    "sold": {
                        "description": "Number of units sold",
                        "type": "integer"
                    },
                    "image_url": {
                        "description": "URL of the food item's image",
                        "type": "string",
                        "nullable": true
                    }
                },
                "type": "object",
                "example": {
                    "id": 1,
                    "category_id": 2,
                    "name": "Burger",
                    "description": "A delicious beef patty with lettuce and tomatoes.",
                    "price": 10.5,
                    "is_available": true,
                    "stock": 50,
                    "sold": 20,
                    "image_url": "http://localhost:8000/storage/food_images/burger.jpg"
                }
            },
            "FoodWithCount": {
                "title": "FoodWithCount",
                "description": "Food model with a count of related order items",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Food"
                    },
                    {
                        "properties": {
                            "order_items_count": {
                                "description": "The number of times this food item has been ordered.",
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "FoodPagination": {
                "title": "Food Pagination",
                "description": "Paginated list of food items",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Food"
                        }
                    },
                    "links": {
                        "description": "Pagination links",
                        "type": "object"
                    },
                    "meta": {
                        "description": "Pagination meta information",
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "FoodWithCountPagination": {
                "title": "Food with Count Pagination",
                "description": "Paginated list of food items including their order count",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FoodWithCount"
                        }
                    },
                    "links": {
                        "description": "Pagination links",
                        "type": "object"
                    },
                    "meta": {
                        "description": "Pagination meta information",
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "CartItem": {
                "title": "CartItem",
                "description": "Cart item model",
                "properties": {
                    "id": {
                        "description": "Cart item ID",
                        "type": "integer",
                        "format": "int64"
                    },
                    "cart_id": {
                        "description": "ID of the associated cart",
                        "type": "integer",
                        "format": "int64"
                    },
                    "food_id": {
                        "description": "ID of the associated food item",
                        "type": "integer",
                        "format": "int64"
                    },
                    "quantity": {
                        "description": "Quantity of the food item",
                        "type": "integer"
                    },
                    "created_at": {
                        "description": "Timestamp of creation",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Timestamp of last update",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object",
                "example": {
                    "id": 1,
                    "cart_id": 1,
                    "food_id": 101,
                    "quantity": 2,
                    "created_at": "2023-01-01T12:00:00.000000Z",
                    "updated_at": "2023-01-01T12:00:00.000000Z"
                }
            },
            "CartItemList": {
                "title": "CartItemList",
                "description": "List of cart items",
                "properties": {
                    "cartItems": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CartItem"
                        }
                    }
                },
                "type": "object"
            },
            "UpdateCartItemRequest": {
                "title": "UpdateCartItemRequest",
                "description": "Request body for updating cart items",
                "required": [
                    "cart_id",
                    "items"
                ],
                "properties": {
                    "items": {
                        "description": "List of new cart items",
                        "type": "array",
                        "items": {
                            "properties": {
                                "food_id": {
                                    "description": "ID of the food item",
                                    "type": "integer"
                                },
                                "quantity": {
                                    "description": "Quantity of the food item",
                                    "type": "integer"
                                }
                            },
                            "type": "object"
                        }
                    }
                },
                "type": "object",
                "example": {
                    "items": [
                        {
                            "food_id": 1,
                            "quantity": 2
                        },
                        {
                            "food_id": 2,
                            "quantity": 1
                        }
                    ]
                }
            },
            "Order": {
                "title": "Order",
                "description": "Order model",
                "properties": {
                    "id": {
                        "description": "Order ID",
                        "type": "integer",
                        "format": "int64"
                    },
                    "user_id": {
                        "description": "ID of the user who placed the order",
                        "type": "integer",
                        "format": "int64"
                    },
                    "order_date": {
                        "description": "Date and time of the order",
                        "type": "string",
                        "format": "date-time"
                    },
                    "total_amount": {
                        "description": "Total amount of the order",
                        "type": "number",
                        "format": "float"
                    },
                    "order_status": {
                        "description": "Current status of the order",
                        "type": "string",
                        "default": "pending",
                        "enum": [
                            "pending",
                            "preparing",
                            "ready",
                            "picked",
                            "delivered",
                            "cancelled"
                        ]
                    },
                    "created_at": {
                        "description": "Timestamp of order creation",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Timestamp of last update",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object",
                "example": {
                    "id": 1,
                    "user_id": 10,
                    "order_date": "2023-01-01T12:00:00.000000Z",
                    "total_amount": 25.75,
                    "order_status": "pending",
                    "created_at": "2023-01-01T12:00:00.000000Z",
                    "updated_at": "2023-01-01T12:00:00.000000Z"
                }
            },
            "OrderItem": {
                "title": "OrderItem",
                "description": "Order item model",
                "properties": {
                    "id": {
                        "description": "Order item ID",
                        "type": "integer",
                        "format": "int64"
                    },
                    "order_id": {
                        "description": "ID of the associated order",
                        "type": "integer",
                        "format": "int64"
                    },
                    "food_id": {
                        "description": "ID of the associated food item",
                        "type": "integer",
                        "format": "int64"
                    },
                    "quantity": {
                        "description": "Quantity of the food item",
                        "type": "integer"
                    },
                    "created_at": {
                        "description": "Timestamp of creation",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Timestamp of last update",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object",
                "example": {
                    "id": 1,
                    "order_id": 1,
                    "food_id": 101,
                    "quantity": 2,
                    "created_at": "2023-01-01T12:00:00.000000Z",
                    "updated_at": "2023-01-01T12:00:00.000000Z"
                }
            },
            "OrderWithItems": {
                "title": "OrderWithItems",
                "description": "Order model with associated order items",
                "example": {
                    "id": 1,
                    "user_id": 10,
                    "order_date": "2023-01-01T12:00:00.000000Z",
                    "total_amount": 25.75,
                    "order_status": "pending",
                    "created_at": "2023-01-01T12:00:00.000000Z",
                    "updated_at": "2023-01-01T12:00:00.000000Z",
                    "order_items": [
                        {
                            "id": 1,
                            "order_id": 1,
                            "food_id": 101,
                            "quantity": 2,
                            "created_at": "2023-01-01T12:00:00.000000Z",
                            "updated_at": "2023-01-01T12:00:00.000000Z"
                        }
                    ]
                },
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Order"
                    },
                    {
                        "properties": {
                            "order_items": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/OrderItem"
                                }
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "NewOrder": {
                "title": "NewOrder",
                "description": "New order model",
                "properties": {
                    "id": {
                        "description": "New order ID",
                        "type": "integer",
                        "format": "int64"
                    },
                    "order_id": {
                        "description": "ID of the associated order",
                        "type": "integer",
                        "format": "int64"
                    },
                    "created_at": {
                        "description": "Timestamp of creation",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Timestamp of last update",
                        "type": "string",
                        "format": "date-time"
                    },
                    "order": {
                        "$ref": "#/components/schemas/Order"
                    }
                },
                "type": "object",
                "example": {
                    "id": 1,
                    "order_id": 1,
                    "created_at": "2023-01-01T12:00:00.000000Z",
                    "updated_at": "2023-01-01T12:00:00.000000Z",
                    "order": {
                        "id": 1,
                        "user_id": 10,
                        "order_date": "2023-01-01T12:00:00.000000Z",
                        "total_amount": 25.75,
                        "order_status": "pending"
                    }
                }
            },
            "OrderPagination": {
                "title": "Order Pagination",
                "description": "Paginated list of orders",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Order"
                        }
                    },
                    "links": {
                        "description": "Pagination links",
                        "type": "object"
                    },
                    "meta": {
                        "description": "Pagination meta information",
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "NewOrderPagination": {
                "title": "New Order Pagination",
                "description": "Paginated list of new orders",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/NewOrder"
                        }
                    },
                    "links": {
                        "description": "Pagination links",
                        "type": "object"
                    },
                    "meta": {
                        "description": "Pagination meta information",
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "Payment": {
                "title": "Payment",
                "description": "Payment model",
                "properties": {
                    "id": {
                        "description": "Payment ID",
                        "type": "integer",
                        "format": "int64"
                    },
                    "user_id": {
                        "description": "ID of the user who made the payment",
                        "type": "integer",
                        "format": "int64"
                    },
                    "order_id": {
                        "description": "ID of the associated order",
                        "type": "integer",
                        "format": "int64"
                    },
                    "payment_type": {
                        "description": "Type of payment",
                        "type": "string",
                        "enum": [
                            "cash",
                            "card"
                        ]
                    },
                    "payment_date": {
                        "description": "Date and time of the payment",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object",
                "example": {
                    "id": 1,
                    "user_id": 1,
                    "order_id": 10,
                    "payment_type": "cash",
                    "payment_date": "2023-01-01T13:00:00.000000Z"
                }
            },
            "PaymentPagination": {
                "title": "Payment Pagination",
                "description": "Paginated list of payments",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Payment"
                        }
                    },
                    "links": {
                        "description": "Pagination links",
                        "type": "object"
                    },
                    "meta": {
                        "description": "Pagination meta information",
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "RegisterPaymentRequest": {
                "title": "RegisterPaymentRequest",
                "description": "Request body for creating a new payment",
                "required": [
                    "order_id",
                    "payment_type"
                ],
                "properties": {
                    "order_id": {
                        "description": "ID of the order to be paid",
                        "type": "integer"
                    },
                    "payment_type": {
                        "description": "Type of payment",
                        "type": "string",
                        "enum": [
                            "cash",
                            "card"
                        ]
                    }
                },
                "type": "object",
                "example": {
                    "order_id": 1,
                    "payment_type": "cash"
                }
            },
            "Feedback": {
                "title": "Feedback",
                "description": "Feedback model",
                "properties": {
                    "id": {
                        "description": "Feedback ID",
                        "type": "integer",
                        "format": "int64"
                    },
                    "user_id": {
                        "description": "ID of the user who provided feedback",
                        "type": "integer",
                        "format": "int64"
                    },
                    "food_id": {
                        "description": "ID of the associated food item",
                        "type": "integer",
                        "format": "int64"
                    },
                    "comment": {
                        "description": "The feedback comment",
                        "type": "string"
                    },
                    "feedback_date": {
                        "description": "Timestamp of the feedback",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object",
                "example": {
                    "id": 1,
                    "user_id": 10,
                    "food_id": 20,
                    "comment": "This food was excellent, highly recommend!",
                    "feedback_date": "2023-01-01T14:30:00.000000Z"
                }
            },
            "FeedbackList": {
                "title": "FeedbackList",
                "description": "List of feedback items",
                "properties": {
                    "feedbacks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Feedback"
                        }
                    }
                },
                "type": "object"
            },
            "RegisterFeedbackRequest": {
                "title": "RegisterFeedbackRequest",
                "description": "Request body for creating a new feedback entry",
                "required": [
                    "food_id",
                    "comment"
                ],
                "properties": {
                    "food_id": {
                        "description": "ID of the food item being commented on",
                        "type": "integer"
                    },
                    "comment": {
                        "description": "The feedback comment",
                        "type": "string"
                    }
                },
                "type": "object",
                "example": {
                    "food_id": 1,
                    "comment": "This food was excellent, highly recommend!"
                }
            },
            "UpdateFeedbackRequest": {
                "title": "UpdateFeedbackRequest",
                "description": "Request body for updating a feedback entry",
                "required": [
                    "comment"
                ],
                "properties": {
                    "comment": {
                        "description": "The updated feedback comment",
                        "type": "string"
                    }
                },
                "type": "object",
                "example": {
                    "comment": "The updated comment."
                }
            }
        },
        "securitySchemes": {
            "sanctum": {
                "type": "http",
                "scheme": "bearer"
            }
        }
    },
    "tags": [
        {
            "name": "Users",
            "description": "API Endpoints for User Management"
        },
        {
            "name": "Category",
            "description": "API Endpoints for Category Management"
        },
        {
            "name": "Food",
            "description": "API Endpoints for Food Management"
        },
        {
            "name": "Cart",
            "description": "API Endpoints for Cart Management"
        },
        {
            "name": "Orders",
            "description": "API Endpoints for Orders Management"
        },
        {
            "name": "Payments",
            "description": "API Endpoints for Payment Management"
        },
        {
            "name": "Feedback",
            "description": "API Endpoints for Feedback Management"
        }
    ]
}